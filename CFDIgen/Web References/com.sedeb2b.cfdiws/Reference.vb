'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
'
Namespace com.sedeb2b.cfdiws
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CFDiSoapBinding", [Namespace]:="http://cfdi.service.ediwinws.edicom.com")>  _
    Partial Public Class CFDiService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private changePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUUIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCfdiOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTimbreCfdiOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelaCFDiOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCfdiTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTimbreCfdiTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUUIDTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelaCFDiSignedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCfdiAckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCfdiFromUUIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CFDIgen.My.MySettings.Default.CFDIgen_com_sedeb2b_cfdiws_CFDiService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event changePasswordCompleted As changePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event getUUIDCompleted As getUUIDCompletedEventHandler
        
        '''<remarks/>
        Public Event getCfdiCompleted As getCfdiCompletedEventHandler
        
        '''<remarks/>
        Public Event getTimbreCfdiCompleted As getTimbreCfdiCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelaCFDiCompleted As cancelaCFDiCompletedEventHandler
        
        '''<remarks/>
        Public Event getCfdiTestCompleted As getCfdiTestCompletedEventHandler
        
        '''<remarks/>
        Public Event getTimbreCfdiTestCompleted As getTimbreCfdiTestCompletedEventHandler
        
        '''<remarks/>
        Public Event getUUIDTestCompleted As getUUIDTestCompletedEventHandler
        
        '''<remarks/>
        Public Event cancelaCFDiSignedCompleted As cancelaCFDiSignedCompletedEventHandler
        
        '''<remarks/>
        Public Event getCfdiAckCompleted As getCfdiAckCompletedEventHandler
        
        '''<remarks/>
        Public Event getCfdiFromUUIDCompleted As getCfdiFromUUIDCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function changePassword(ByVal user As String, ByVal password As String, ByVal newPassword As String) As <System.Xml.Serialization.XmlElementAttribute("changePasswordReturn")> Boolean
            Dim results() As Object = Me.Invoke("changePassword", New Object() {user, password, newPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub changePasswordAsync(ByVal user As String, ByVal password As String, ByVal newPassword As String)
            Me.changePasswordAsync(user, password, newPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub changePasswordAsync(ByVal user As String, ByVal password As String, ByVal newPassword As String, ByVal userState As Object)
            If (Me.changePasswordOperationCompleted Is Nothing) Then
                Me.changePasswordOperationCompleted = AddressOf Me.OnchangePasswordOperationCompleted
            End If
            Me.InvokeAsync("changePassword", New Object() {user, password, newPassword}, Me.changePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnchangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.changePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent changePasswordCompleted(Me, New changePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getUUID(ByVal user As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal file() As Byte) As <System.Xml.Serialization.XmlElementAttribute("getUUIDReturn")> String
            Dim results() As Object = Me.Invoke("getUUID", New Object() {user, password, file})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUUIDAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte)
            Me.getUUIDAsync(user, password, file, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUUIDAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte, ByVal userState As Object)
            If (Me.getUUIDOperationCompleted Is Nothing) Then
                Me.getUUIDOperationCompleted = AddressOf Me.OngetUUIDOperationCompleted
            End If
            Me.InvokeAsync("getUUID", New Object() {user, password, file}, Me.getUUIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUUIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUUIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUUIDCompleted(Me, New getUUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCfdi(ByVal user As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal file() As Byte) As <System.Xml.Serialization.XmlElementAttribute("getCfdiReturn", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getCfdi", New Object() {user, password, file})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCfdiAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte)
            Me.getCfdiAsync(user, password, file, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCfdiAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte, ByVal userState As Object)
            If (Me.getCfdiOperationCompleted Is Nothing) Then
                Me.getCfdiOperationCompleted = AddressOf Me.OngetCfdiOperationCompleted
            End If
            Me.InvokeAsync("getCfdi", New Object() {user, password, file}, Me.getCfdiOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCfdiOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCfdiCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCfdiCompleted(Me, New getCfdiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTimbreCfdi(ByVal user As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal file() As Byte) As <System.Xml.Serialization.XmlElementAttribute("getTimbreCfdiReturn", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getTimbreCfdi", New Object() {user, password, file})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTimbreCfdiAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte)
            Me.getTimbreCfdiAsync(user, password, file, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTimbreCfdiAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte, ByVal userState As Object)
            If (Me.getTimbreCfdiOperationCompleted Is Nothing) Then
                Me.getTimbreCfdiOperationCompleted = AddressOf Me.OngetTimbreCfdiOperationCompleted
            End If
            Me.InvokeAsync("getTimbreCfdi", New Object() {user, password, file}, Me.getTimbreCfdiOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTimbreCfdiOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTimbreCfdiCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTimbreCfdiCompleted(Me, New getTimbreCfdiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelaCFDi(ByVal user As String, ByVal password As String, ByVal rfc As String, <System.Xml.Serialization.XmlElementAttribute("uuid")> ByVal uuid() As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pfx() As Byte, ByVal pfxPassword As String) As <System.Xml.Serialization.XmlElementAttribute("cancelaCFDiReturn")> CancelaResponse
            Dim results() As Object = Me.Invoke("cancelaCFDi", New Object() {user, password, rfc, uuid, pfx, pfxPassword})
            Return CType(results(0),CancelaResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDiAsync(ByVal user As String, ByVal password As String, ByVal rfc As String, ByVal uuid() As String, ByVal pfx() As Byte, ByVal pfxPassword As String)
            Me.cancelaCFDiAsync(user, password, rfc, uuid, pfx, pfxPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDiAsync(ByVal user As String, ByVal password As String, ByVal rfc As String, ByVal uuid() As String, ByVal pfx() As Byte, ByVal pfxPassword As String, ByVal userState As Object)
            If (Me.cancelaCFDiOperationCompleted Is Nothing) Then
                Me.cancelaCFDiOperationCompleted = AddressOf Me.OncancelaCFDiOperationCompleted
            End If
            Me.InvokeAsync("cancelaCFDi", New Object() {user, password, rfc, uuid, pfx, pfxPassword}, Me.cancelaCFDiOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelaCFDiOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelaCFDiCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelaCFDiCompleted(Me, New cancelaCFDiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCfdiTest(ByVal user As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal file() As Byte) As <System.Xml.Serialization.XmlElementAttribute("getCfdiTestReturn", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getCfdiTest", New Object() {user, password, file})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCfdiTestAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte)
            Me.getCfdiTestAsync(user, password, file, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCfdiTestAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte, ByVal userState As Object)
            If (Me.getCfdiTestOperationCompleted Is Nothing) Then
                Me.getCfdiTestOperationCompleted = AddressOf Me.OngetCfdiTestOperationCompleted
            End If
            Me.InvokeAsync("getCfdiTest", New Object() {user, password, file}, Me.getCfdiTestOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCfdiTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCfdiTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCfdiTestCompleted(Me, New getCfdiTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTimbreCfdiTest(ByVal user As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal file() As Byte) As <System.Xml.Serialization.XmlElementAttribute("getTimbreCfdiTestReturn", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getTimbreCfdiTest", New Object() {user, password, file})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTimbreCfdiTestAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte)
            Me.getTimbreCfdiTestAsync(user, password, file, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTimbreCfdiTestAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte, ByVal userState As Object)
            If (Me.getTimbreCfdiTestOperationCompleted Is Nothing) Then
                Me.getTimbreCfdiTestOperationCompleted = AddressOf Me.OngetTimbreCfdiTestOperationCompleted
            End If
            Me.InvokeAsync("getTimbreCfdiTest", New Object() {user, password, file}, Me.getTimbreCfdiTestOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTimbreCfdiTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTimbreCfdiTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTimbreCfdiTestCompleted(Me, New getTimbreCfdiTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getUUIDTest(ByVal user As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal file() As Byte) As <System.Xml.Serialization.XmlElementAttribute("getUUIDTestReturn")> String
            Dim results() As Object = Me.Invoke("getUUIDTest", New Object() {user, password, file})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUUIDTestAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte)
            Me.getUUIDTestAsync(user, password, file, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUUIDTestAsync(ByVal user As String, ByVal password As String, ByVal file() As Byte, ByVal userState As Object)
            If (Me.getUUIDTestOperationCompleted Is Nothing) Then
                Me.getUUIDTestOperationCompleted = AddressOf Me.OngetUUIDTestOperationCompleted
            End If
            Me.InvokeAsync("getUUIDTest", New Object() {user, password, file}, Me.getUUIDTestOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUUIDTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUUIDTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUUIDTestCompleted(Me, New getUUIDTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelaCFDiSigned(ByVal user As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal sign() As Byte) As <System.Xml.Serialization.XmlElementAttribute("cancelaCFDiSignedReturn")> CancelaResponse
            Dim results() As Object = Me.Invoke("cancelaCFDiSigned", New Object() {user, password, sign})
            Return CType(results(0),CancelaResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDiSignedAsync(ByVal user As String, ByVal password As String, ByVal sign() As Byte)
            Me.cancelaCFDiSignedAsync(user, password, sign, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDiSignedAsync(ByVal user As String, ByVal password As String, ByVal sign() As Byte, ByVal userState As Object)
            If (Me.cancelaCFDiSignedOperationCompleted Is Nothing) Then
                Me.cancelaCFDiSignedOperationCompleted = AddressOf Me.OncancelaCFDiSignedOperationCompleted
            End If
            Me.InvokeAsync("cancelaCFDiSigned", New Object() {user, password, sign}, Me.cancelaCFDiSignedOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelaCFDiSignedOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelaCFDiSignedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelaCFDiSignedCompleted(Me, New cancelaCFDiSignedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCfdiAck(ByVal user As String, ByVal password As String, <System.Xml.Serialization.XmlElementAttribute("uuid")> ByVal uuid() As String) As <System.Xml.Serialization.XmlElementAttribute("getCfdiAckReturn", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getCfdiAck", New Object() {user, password, uuid})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCfdiAckAsync(ByVal user As String, ByVal password As String, ByVal uuid() As String)
            Me.getCfdiAckAsync(user, password, uuid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCfdiAckAsync(ByVal user As String, ByVal password As String, ByVal uuid() As String, ByVal userState As Object)
            If (Me.getCfdiAckOperationCompleted Is Nothing) Then
                Me.getCfdiAckOperationCompleted = AddressOf Me.OngetCfdiAckOperationCompleted
            End If
            Me.InvokeAsync("getCfdiAck", New Object() {user, password, uuid}, Me.getCfdiAckOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCfdiAckOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCfdiAckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCfdiAckCompleted(Me, New getCfdiAckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://cfdi.service.ediwinws.edicom.com", ResponseNamespace:="http://cfdi.service.ediwinws.edicom.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCfdiFromUUID(ByVal user As String, ByVal password As String, ByVal rfc As String, <System.Xml.Serialization.XmlElementAttribute("uuid")> ByVal uuid() As String) As <System.Xml.Serialization.XmlElementAttribute("getCfdiFromUUIDReturn", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getCfdiFromUUID", New Object() {user, password, rfc, uuid})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCfdiFromUUIDAsync(ByVal user As String, ByVal password As String, ByVal rfc As String, ByVal uuid() As String)
            Me.getCfdiFromUUIDAsync(user, password, rfc, uuid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCfdiFromUUIDAsync(ByVal user As String, ByVal password As String, ByVal rfc As String, ByVal uuid() As String, ByVal userState As Object)
            If (Me.getCfdiFromUUIDOperationCompleted Is Nothing) Then
                Me.getCfdiFromUUIDOperationCompleted = AddressOf Me.OngetCfdiFromUUIDOperationCompleted
            End If
            Me.InvokeAsync("getCfdiFromUUID", New Object() {user, password, rfc, uuid}, Me.getCfdiFromUUIDOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCfdiFromUUIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCfdiFromUUIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCfdiFromUUIDCompleted(Me, New getCfdiFromUUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://cfdi.service.ediwinws.edicom.com")>  _
    Partial Public Class CancelaResponse
        
        Private ackField As String
        
        Private textField As String
        
        Private uuidsField() As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property ack() As String
            Get
                Return Me.ackField
            End Get
            Set
                Me.ackField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property text() As String
            Get
                Return Me.textField
            End Get
            Set
                Me.textField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true),  _
         System.Xml.Serialization.XmlArrayItemAttribute("item", IsNullable:=false)>  _
        Public Property uuids() As String()
            Get
                Return Me.uuidsField
            End Get
            Set
                Me.uuidsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub changePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As changePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class changePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getUUIDCompletedEventHandler(ByVal sender As Object, ByVal e As getUUIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUUIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCfdiCompletedEventHandler(ByVal sender As Object, ByVal e As getCfdiCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCfdiCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getTimbreCfdiCompletedEventHandler(ByVal sender As Object, ByVal e As getTimbreCfdiCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTimbreCfdiCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub cancelaCFDiCompletedEventHandler(ByVal sender As Object, ByVal e As cancelaCFDiCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelaCFDiCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CancelaResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CancelaResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCfdiTestCompletedEventHandler(ByVal sender As Object, ByVal e As getCfdiTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCfdiTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getTimbreCfdiTestCompletedEventHandler(ByVal sender As Object, ByVal e As getTimbreCfdiTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTimbreCfdiTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getUUIDTestCompletedEventHandler(ByVal sender As Object, ByVal e As getUUIDTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUUIDTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub cancelaCFDiSignedCompletedEventHandler(ByVal sender As Object, ByVal e As cancelaCFDiSignedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelaCFDiSignedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As CancelaResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),CancelaResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCfdiAckCompletedEventHandler(ByVal sender As Object, ByVal e As getCfdiAckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCfdiAckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCfdiFromUUIDCompletedEventHandler(ByVal sender As Object, ByVal e As getCfdiFromUUIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCfdiFromUUIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
End Namespace
